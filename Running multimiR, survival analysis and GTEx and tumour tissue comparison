#loading multimiR 
library (multiMiR)

#loading my miRNA list in
mirlist<-read.csv("~/Desktop/HAFNER_8_miR_targets_3UTR.csv")
library(dplyr)
miRcolumn<-mirlist%>%select(miRNAs)
miRcolumn

#running on all databases example 
validated.predicted<-get_multimir(url = NULL, org = "hsa", mirna = miRcolumn , target = NULL, disease.drug = NULL, table = "all", predicted.cutoff = NULL, predicted.cutoff.type = "p", predicted.site = "conserved",
summary = FALSE, add.link = FALSE, use.tibble = FALSE, limit = NULL, legacy.out = FALSE)
validated.predicted
class(validated.predicted)

#subsetting out predicted database example where same was done for validated database
predicted.subsetted<-subset(alltargetspredicted@data, alltargetspredicted@data$type == "predicted")
class(predicted.subsetted)
subsestted.ensembl<-predicted.subsetted %>% 
  filter(database %in% c("diana_microt","targetscan", "microcosm", "mirdb")) %>%
  group_by(mature_mirna_id, target_symbol, target_ensembl) %>%
  summarise(n = n()) 
removing.duplicates<-subsetting.4databases %>% distinct(database, mature_mirna_id, target_symbol, target_ensembl, .keep_all = TRUE)
  subsestted.database2<-removing.duplicates%>% 
  filter(database %in% c("diana_microt","targetscan", "microcosm", "mirdb")) %>%
  group_by(database, mature_mirna_id, target_symbol, target_ensembl) %>%
  summarise(n = n())
subsestted.database3<-removing.duplicates%>% 
  filter(database %in% c("diana_microt","targetscan", "microcosm", "mirdb")) %>%
  group_by(mature_mirna_id, target_symbol, target_ensembl) %>%
  summarise(n = n())
subsetted.2ormore<-subsestted.database3 %>% filter (n>=2)

#preparing TCGA miRNA data for survival analysis
library(miRBaseConverter)
version=checkMiRNAVersion(predicted.subsetted$mature_mirna_id, verbose = TRUE)
miR.TCGA.converted.database<-miRNA_AccessionToName(miR.TCGA.database$sample,targetVersion = "v22" )
library(tidyverse)
miR.TCGA.joined<-left_join(miR.TCGA.converted.database,miR.TCGA.database,by=c("Accession"="sample"))
miR.TCGA.joined2<-na.omit(miR.TCGA.joined)
rowz<-paste(mirlist$miRNAs)
rownames(mirlist)<-rowz
library(ggplot2)
library(limma)
rowz3<-paste(phenotype.TCGA.database$sample)
rownames(phenotype.TCGA.database)<-rowz3
rownames(phenotype.TCGA.database) <- gsub(rownames(phenotype.TCGA.database),pattern="-",replace=".")
sum(colnames(miR.TCGA.joined2) %in% rownames(phenotype.TCGA.database))


#survival analysis on genes example where same approach was used for TCGA miRNA data
gene.expression.TCGA.database<-read.delim("~/Downloads/HiSeqV2_PANCAN.gz")
sum(colnames(gene.expression.TCGA.database) %in% rownames(clin.data))
os.time2 <- clin.data[colnames(gene.expression.TCGA.database),"days_to_last_followup"]
os.event2 <- as.numeric(clin.data[colnames(gene.expression.TCGA.database),"vital_status"]=="DECEASED")
pros.os2<-Surv(os.time2,os.event2)
class(gene.expression.TCGA.database)
gene.expression.TCGA.database2<-as.matrix(gene.expression.TCGA.database)
gene.expression.TCGA.database3<-na.omit(gene.expression.TCGA.database2)
all.hrs <- rep(NA,nrow(gene.expression.TCGA.database3))
all.pvals <- rep(NA,nrow(gene.expression.TCGA.database3))
all.lci <- rep(NA,nrow(gene.expression.TCGA.database3))
all.uci <- rep(NA,nrow(gene.expression.TCGA.database3))
for(i in 1:nrow(gene.expression.TCGA.database3)){
coxphmodel <- coxph(pros.os2 ~ gene.expression.TCGA.database3[i,])
all.hrs[i] <- summary(coxphmodel)$coef[1,2] 
all.pvals[i] <- summary(coxphmodel)$coef[1,5] 
all.lci[i] <- summary(coxphmodel)$conf.int[1,3] 
all.uci[i] <- summary(coxphmodel)$conf.int[1,4] 
}

#GTex and tumour tissue comparison example
library(TCGAbiolinks)
library(survminer)
TCGA.GTEX.CADM1<-read.table(file = '~/Downloads/denseDataOnlyDownloadCADM1.tsv', sep = '\t', header = TRUE)
x.cadm1<-TCGA.GTEX.CADM1[1:100,7]
y.cadm1<-TCGA.GTEX.CADM1[101:595,7]
t.test(x.cadm1,y.cadm1)

tcga.gtex.testing1 <- gather(TCGA.GTEX.all, "CADM1", "CDC14B", "KCNJ2", "PISD", "RELN", "DLL1","IKBKB", key="gene", value="value")
tcga.gtex.testing2<-tcga.gtex.testing3[,7:58]
tcga.gtex.testing1$sample_type<- as.factor(tcga.gtex.testing3$sample_type)
tcga.gtex.testing2<-tcga.gtex.testing3[,7:58]
ggplot(tcga.gtex.testing2, aes(x = gene, y = value, color = sample_type)) +
  geom_boxplot()
  p<-ggplot(tcga.gtex.testing2, aes(x = gene, y = value, color = sample_type)) +
  geom_boxplot()
p + facet_wrap( ~ gene, scales="free")
```
