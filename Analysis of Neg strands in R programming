#code for merging case and control samples into single data frame
samp12<-read.table("cpg.raw.12.rs.CG.bed", sep="\t", row.names=NULL, skip=1, header=F)
rowz<-paste(samp12$V1,":",samp12$V2, sep="")
rownames(samp12)<-rowz
samp13<-read.table("cpg.raw.13.rs.CG.bed", sep="\t", row.names=NULL, skip=1, header=F)
rowz<-paste(samp13$V1,":",samp13$V2, sep="")
rownames(samp13)<-rowz
SAMP<-merge(samp12,samp13, by="row.names")
SAMP<-SAMP[which(SAMP$V5.x>10),]
SAMP<-SAMP[which(SAMP$V5.y>10),]
rownames(SAMP)<-SAMP$Row.names
samp14<-read.table("cpg.raw.14.rs.CG.bed", sep="\t", row.names=NULL, skip=1, header=F)
rowz<-paste(samp14$V1,":",samp14$V2, sep="")
rownames(samp14)<-rowz
SAMP<-merge(SAMP,samp14, by="row.names")
SAMP<-SAMP[which(SAMP$V5>10),]
rownames(SAMP)<-SAMP$Row.names
SAMP[1:3,c(5,6,7,12,13,18,19)]
SAMP[1:3,c(5,6,7,12,13,18,19)]
cases.samp.merged<-SAMP[,c(5,6,7,12,13,18,19)]
saveRDS(cases.samp.merged,”cases_samp_merged.rds”)
samp15<-read.table("cpg.raw.15.rs.CG.bed", sep="\t", row.names=NULL, skip=1, header=F)
samp16<-read.table("cpg.raw.16.rs.CG.bed", sep="\t", row.names=NULL, skip=1, header=F)
samp17<-read.table("cpg.raw.17.rs.CG.bed", sep="\t", row.names=NULL, skip=1, header=F)
rowz<-paste(samp15$V1,":",samp15$V2, sep="")
rownames(samp15)<-rowz
samp15<-samp15[,1:6]
rowz<-paste(samp16$V1,":",samp16$V2, sep="")
rownames(samp16)<-rowz
samp16<-samp16[,1:6]
rowz<-paste(samp17$V1,":",samp17$V2, sep="")
rownames(samp17)<-rowz
samp17<-samp17[,1:6]
SAMP2<-merge(samp15,samp16, by="row.names")
SAMP2<-SAMP2[which(SAMP2$V5.x>10),]
SAMP2<-SAMP2[which(SAMP2$V5.y>10),]
rownames(SAMP2)<-SAMP2$Row.names
SAMP2<-merge(SAMP2,samp17, by="row.names")
SAMP2<-SAMP2[which(SAMP2$V5>10),]
rownames(SAMP2)<-SAMP2$Row.names
SAMP2[1:3,c(5,6,7,12,13,18,19)]
control.samp.merged<-SAMP2[,c(5,6,7,12,13,18,19)] 
cases.samp.merged<-SAMP[,c(5,6,7,12,13,18,19)]
saveRDS(cases.samp.merged,"cases_samp_merged.rds")
cases.samp.merged<-readRDS("cases_samp_merged.rds")
rm(cases.control.merged)
CASE.CONT<-merge(cases.samp.merged,control.samp.merged,by="row.names")

#code for calculating mean and t.test
CASE.CONT$case.mean<-apply(CASE.CONT[,c(3,5,7)],1,mean,na.rm=T)
CASE.CONT$cont.mean<-apply(CASE.CONT[,c(10,12,14)],1,mean,na.rm=T)
CASE.CONT$diff<-CASE.CONT$case.mean-CASE.CONT$cont.mean
summary(CASE.CONT$diff)
wh.case<-c(3,5,7)
wh.cont<-c(10,12,14)
t.test(as.numeric(CASE.CONT[i,wh.case]),as.numeric(CASE.CONT[i,wh.cont]))
for(i in 1:nrow(CASE.CONT)){
+ if(sd(CASE.CONT[i,c(wh.case,wh.cont)])==0) next
+ ttest.pval[i]<-t.test(as.numeric(CASE.CONT[i,wh.case]),as.numeric(CASE.CONT[i,wh.cont]))$p.value
+ }

CASE.CONT$ttest.pval<-ttest.pval
CASE.CONT$ttest.fdr<-p.adjust(ttest.pval,method="fdr")

#weighting coverage example 

median(CASE.CONT$samp12.cov)
samp12.weight.cov<-rep(1,length(CASE.CONT$samp12.cov))
for(i in 1:length(samp12.weight.cov))
{
if(CASE.CONT$samp12.cov[i]>median(CASE.CONT$samp12.cov)) next
samp12.weight.cov[i]<-CASE.CONT$samp12.cov[i]/median(CASE.CONT$samp12.cov)
}
chr.list<-strsplit(CASE.CONT$Row.names, “:”)

chr.list.chr<-unlist(chr.list)[c(TRUE,FALSE)]
chr.list.start<-unlist(chr.list)[c(FALSE,TRUE)]

CASE.CONT$chr<-chr.list.chr
CASE.CONT$start<-chr.list.start


targets$Wmean.samp12<-NA

for (i in 1:nrow(targets))

{

chrz<-targets$chr[i]
startz<-targets$start[i]
endz<-targets$end[i]

sel<-which(CASE.CONT$chr==chrz & CASE.CONT$start>startz & CASE.CONT$start<endz)

targets$Wmean.samp12[i]<-(sum(samp12.weight.cov[sel]*CASE.CONT$samp12.meth[sel], na.rm=T))/sum(samp12.weight.cov[sel],na.rm=T)

}

#example code for exposure signiture calculation
bmi<-read.table("bmi.txt", sep="\t", header=T)
rownames(bmi)<-bmi$CpG
wh3<-which(is.element(rownames(bmi),rownames(targets)))
bmi<-bmi[wh3,]
bmi.meth.new<-targets[rownames(bmi),]
bmi.pred.new<-rep(NA,ncol(targets))
bmi.meth.new
bmi.pred.new
bmi.meth.new<-na.omit(bmi.meth.new)
bmi.meth.new
samp12Beta.Bmi<-(bmi.meth.new$Wmean.samp12)/100
bmi.meth.new$samp12Beta<-samp12Beta.Bmi
bmi.meth.new
for (i in 1:ncol(bmi.meth.new))
{
bmi.pred.new[i]<-sum(bmi.meth.new[,i]*bmi$Beta, na.rm=T)
}
bmi.pred.new
bmi.new.z<-(bmi.pred.new-mean(bmi.pred.new))/sd(bmi.pred.new)
bmi.new.z

